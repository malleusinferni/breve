(def car (expr)
  (let (car & cdr) expr)
  car)

(def cdr (expr)
  (let (car & cdr) expr)
  cdr)

(def nil? (expr)
  (= expr '()))

(def cons? (expr)
  (= (type expr) 'cons))

(def int? (expr)
  (= (type expr) 'int))

(def symbol? (expr)
  (= (type expr) 'symbol))

(syn push! (name expr)
  (list 'mut! name (list 'cons expr name)))

(syn pop! (name)
  (list 'car (list 'mut! name (list 'cdr name))))

(def len (list)
  (let iter (fn (n xs) (if xs (call iter (+ 1 n) (cdr xs)) n)))
  (call iter 0 list))

(def not (xs)
  (if xs 't '()))

(def map (f xs)
  (if xs
    (cons (call f (car xs)) (map f (cdr xs)))
    xs))

(def list items items)

(def nth (i xs)
  (if (> i 0)
    (nth (- i 1) (cdr xs))
    (car xs)))

(syn with (head & body)
  (let names (pop! head))
  (let expr (pop! head))
  (list 'call (cons 'fn (cons names body)) expr))

(syn when (test & body)
  (list 'if test
    (cons 'do body)
    (list)))

(def iota (n)
  (let iter
    (fn (i)
      (if (> i n)
        '()
        (cons i (call iter (+ i 1))))))
  (call iter 1))

(def append (lhs rhs)
  (if lhs
    (cons (car lhs) (append (cdr lhs) rhs))
    rhs))

(append (iota 7) (map (fn (n) (+ 7 n)) (iota 7)))
