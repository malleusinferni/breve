(def car (expr)
  (let (car & cdr) expr)
  car)

(def cdr (expr)
  (let (car & cdr) expr)
  cdr)

(def nil? (expr)
  (= expr '()))

(def cons? (expr)
  (= (type expr) 'cons))

(def int? (expr)
  (= (type expr) 'int))

(def symbol? (expr)
  (= (type expr) 'symbol))

(syn and (expr & rest)
  (if (nil? rest)
    expr
    (list 'if expr (cons 'and rest) '())))

(syn or (expr & rest)
  (if (nil? rest)
    expr
    (list 'if expr true (cons 'or rest))))

(def caar (xs) (car (car xs)))
(def cadr (xs) (car (cdr xs)))
(def cdar (xs) (cdr (car xs)))
(def cddr (xs) (cdr (cdr xs)))

(def caaar (xs) (car (car (car xs))))
(def caadr (xs) (car (car (cdr xs))))
(def cadar (xs) (car (cdr (car xs))))
(def caddr (xs) (car (cdr (cdr xs))))

(def cdaar (xs) (cdr (car (car xs))))
(def cdadr (xs) (cdr (car (cdr xs))))
(def cddar (xs) (cdr (cdr (car xs))))
(def cdddr (xs) (cdr (cdr (cdr xs))))

(def len (list)
  (label iter (n xs)
    (if xs
      (iter (+ 1 n) (cdr xs))
      n))
  (iter 0 list))

(assert (= (len '(1 2 3 4 5)) 5))

(def last (xs)
  (let (car & cdr) xs)
  (if cdr
    (last cdr)
    car))

(assert (= (last '(1 2 3 4 5)) 5))

(def do exprs
  (last exprs))

(assert (= 5 (do 1 2 3 4 5)))

(def not (xs)
  (if xs true '()))

(def append (lhs rhs)
  (if lhs
    (cons (car lhs) (append (cdr lhs) rhs))
    rhs))

(def map (f xs)
  (if xs
    (cons (call f (car xs)) (map f (cdr xs)))
    xs))

(def filter (f xs)
  (if (nil? xs)
    xs
    (if (call f (car xs))
      (cons (car xs) (filter f (cdr xs)))
      (filter f (cdr xs)))))

(def fold (f z xs)
  (if (cons? xs)
    (call f (car xs) (fold f z (cdr xs)))
    z))

(def list items items)

(def nth (i xs)
  (if (> i 1)
    (nth (- i 1) (cdr xs))
    (car xs)))

(def 1st (xs)
  (car xs))

(def 2nd (xs)
  (car (cdr xs)))

(def 3rd (xs)
  (car (cdr (cdr xs))))

(def iota (n)
  (let iter
    (fn (i)
      (if (> i n)
        '()
        (cons i (call iter (+ i 1))))))
  (call iter 1))

(syn with (head & body)
  (let (names expr) head)
  `(call (fn () (let ,names ,expr) ,@body)))

(assert (= (with (x 1) x) 1))

(syn cond (test expr & rest)
  `(if ,test ,expr ,(if rest (cons 'cond rest) nil)))

(syn quote (expr)
  (tagged 'quote expr))

(syn when (test & body)
  `(if ,test
     (do ,@body)
     ()))

(syn case (expr & branches)
  (let expr-name (gensym))

  (label expand-branch (head body & branches)
    (let else (if branches (apply #'expand-branch branches) nil))
    `(if (= ,expr-name ,head) ,body ,else))

  `(with (,expr-name ,expr) ,(apply #'expand-branch branches)))

(syn push! (name expr)
  `(mut! ,name (cons ,expr ,name)))

(syn pop! (name)
  `(car (mut! ,name (cdr ,name))))
